name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: stefantagarski/event-backend
  FRONTEND_IMAGE: stefantagarski/event-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set image tag
        id: tag
        run: echo "tag=${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}" >> $GITHUB_OUTPUT

      - name: Build and push images
        run: |
          TAG=${{ steps.tag.outputs.tag }}
          
          # Build and push backend
          docker build -t ${{ env.BACKEND_IMAGE }}:$TAG ./backend
          docker push ${{ env.BACKEND_IMAGE }}:$TAG
          
          # Build and push frontend  
          docker build -t ${{ env.FRONTEND_IMAGE }}:$TAG ./frontend
          docker push ${{ env.FRONTEND_IMAGE }}:$TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            cd ~/event-management-system
            
            # Create environment file
            cat > .env << EOF
            # MongoDB Configuration
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
            MONGO_INITDB_DATABASE=eventdb
            MONGO_HOST=mongodb
            MONGO_PORT=27017
            DATABASE_NAME=eventdb

            # Flask Backend Configuration
            FLASK_ENV=production
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            CORS_ORIGINS=*

            # API Configuration
            API_BASE_URL=http://backend:5000/api
            BACKEND_URL=http://backend:5000

            # Port Configuration
            MONGODB_PORT=27017
            BACKEND_PORT=5000
            FRONTEND_PORT=8501
            EOF
            
            # Deploy with latest images
            docker-compose pull
            docker-compose down
            docker-compose up -d
            
            # Cleanup
            docker image prune -f